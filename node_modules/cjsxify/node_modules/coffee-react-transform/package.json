{
  "name": "coffee-react-transform",
  "description": "React JSX support for Coffeescript",
  "keywords": [
    "coffeescript",
    "react",
    "jsx",
    "cjsx",
    "coffee-react"
  ],
  "author": {
    "name": "James Friend"
  },
  "version": "0.2.0",
  "licenses": [
    {
      "type": "MIT",
      "url": "https://raw.github.com/jsdf/coffee-react-transform/master/LICENSE"
    }
  ],
  "scripts": {
    "test": "cake test",
    "prepublish": "cake build"
  },
  "files": [
    "index.js",
    "lib/",
    "bin/"
  ],
  "bin": {
    "cjsx-transform": "./bin/cjsx-transform",
    "csx-transform": "./bin/csx-transform"
  },
  "homepage": "https://github.com/jsdf/coffee-react-transform",
  "bugs": {
    "url": "https://github.com/jsdf/coffee-react-transform/issues"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/jsdf/coffee-react-transform.git"
  },
  "devDependencies": {
    "coffee-script": "^1.7.1"
  },
  "readme": "# Coffeescript React Transformer\n\nProvides support for an equivalent of JSX syntax in Coffeescript (called CJSX) so you can write your Facebook React components with the full awesomeness of Coffeescript.\n\n#### Example\n\ncar-component.coffee\n\n```html\n# @cjsx React.DOM\nCar = React.createClass\n  render: ->\n    <Vehicle doors=4 locked={isLocked()}  data-colour=\"red\" on>\n      <FrontSeat />\n      <BackSeat />\n      <p>Which seat can I take? {@props.seat}</p>\n    </Vehicle>\n```\n\ntransform\n\n```bash\ncjsx-transform car-component.coffee\n```\n\noutput\n\n```coffeescript\n\nCar = React.createClass\n  render: ->\n    Vehicle({\"doors\": 4, \"locked\": (isLocked()), \"data-colour\": \"red\", \"on\": true}, \n      FrontSeat(null), \n      BackSeat(null), \n      React.DOM.p(null, \"Which seat can I take? \", (@props.seat))\n    )\n```\n\n### Getting Started\n`coffee-react-transform` simply handles preprocessing your coffeescript with JSX-style markup. Instead of using it directly, you may want to make use of one of these more high-level tools:   \n- For a drop in replacement for the `coffee` executable check out [coffee-react](https://github.com/jsdf/coffee-react).  \n- If you want to be able to `require()` cjsx files on the server use  [node-cjsx](https://github.com/SimonDegraeve/node-cjsx) or [coffee-react](https://github.com/jsdf/coffee-react).  \n- If you want to use cjsx via a browserify transform, take a look at  [coffee-reactify](https://github.com/jsdf/coffee-reactify) or [cjsxify](https://github.com/SimonDegraeve/cjsxify).  \n- For an equivalent to [react-quickstart](https://github.com/andreypopp/react-quickstart) see [react-coffee-quickstart](https://github.com/SimonDegraeve/react-coffee-quickstart).  \n\n### Installation\n```bash\nnpm install -g coffee-react-transform\n```\n\n### CLI\n\n```bash\ncjsx-transform [input file]\n```\nOutputs Coffeescript code to stdout. Redirect it to a file or straight to the Coffeescript compiler, eg.\n```bash\ncjsx-transform examples/car.coffee | coffee -cs > car.js\n```\n\n### API\n```coffeescript\ntransform = require 'coffee-react-transform'\n\ntransformed = transform('...some cjsx code...')\n```\n\n### Tests\n\n`cake test` or `cake watch:test`\n\n\n#### Note about the .cjsx file extension\nThe custom file extension recently changed from `.csx` to `.cjsx` to avoid conflicting with an existing C# related file extension, so be sure to update your files accordingly (including changing the pragma to  `@cjsx`). You can also just use `.coffee` as the file extension. Backwards compatibility will be maintained until the next major version.\n\n",
  "readmeFilename": "README.md",
  "_id": "coffee-react-transform@0.2.0",
  "dist": {
    "shasum": "6fff24ab68ab337d0477f0a732bcfaacbba4b84d"
  },
  "_from": "coffee-react-transform@~0.2.0",
  "_resolved": "https://registry.npmjs.org/coffee-react-transform/-/coffee-react-transform-0.2.0.tgz"
}
